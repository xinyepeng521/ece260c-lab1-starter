/* Generated by Yosys 0.51+85 (git sha1 d3aec12fe, clang++ 18.1.8 -fPIC -O3) */

(* src = "gcd.v:109.1-320.10" *)
module GcdUnitCtrlRTL(a_mux_sel, a_reg_en, b_mux_sel, b_reg_en, clk, is_a_lt_b, is_b_zero, req_rdy, req_val, reset, resp_rdy, resp_val);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  (* src = "gcd.v:111.24-111.33" *)
  output [1:0] a_mux_sel;
  wire [1:0] a_mux_sel;
  (* src = "gcd.v:112.24-112.32" *)
  output a_reg_en;
  wire a_reg_en;
  (* src = "gcd.v:113.24-113.33" *)
  output b_mux_sel;
  wire b_mux_sel;
  (* src = "gcd.v:114.24-114.32" *)
  output b_reg_en;
  wire b_reg_en;
  (* src = "gcd.v:115.24-115.27" *)
  input clk;
  wire clk;
  (* src = "gcd.v:126.19-126.32" *)
  wire [1:0] curr_state__0;
  (* src = "gcd.v:127.19-127.35" *)
  wire [1:0] current_state__1;
  (* src = "gcd.v:116.24-116.33" *)
  input is_a_lt_b;
  wire is_a_lt_b;
  (* src = "gcd.v:117.24-117.33" *)
  input is_b_zero;
  wire is_b_zero;
  (* src = "gcd.v:130.19-130.32" *)
  wire [1:0] next_state__0;
  (* src = "gcd.v:118.24-118.31" *)
  output req_rdy;
  wire req_rdy;
  (* src = "gcd.v:119.24-119.31" *)
  input req_val;
  wire req_val;
  (* src = "gcd.v:120.24-120.29" *)
  input reset;
  wire reset;
  (* src = "gcd.v:121.24-121.32" *)
  input resp_rdy;
  wire resp_rdy;
  (* src = "gcd.v:122.24-122.32" *)
  output resp_val;
  wire resp_val;
  (* src = "gcd.v:147.19-147.28" *)
  wire \state$clk ;
  (* src = "gcd.v:131.19-131.28" *)
  wire [1:0] \state$in_ ;
  (* src = "gcd.v:148.19-148.28" *)
  wire [1:0] \state$out ;
  (* src = "gcd.v:146.19-146.30" *)
  wire \state$reset ;
  assign _00_ = \state$out [1] | \state$out [0];
  assign b_mux_sel = ~_00_;
  assign _01_ = \state$out [0] | ~(\state$out [1]);
  assign resp_val = ~_01_;
  assign _02_ = \state$out [1] | ~(\state$out [0]);
  assign _03_ = _02_ | is_a_lt_b;
  assign a_mux_sel[0] = _00_ & ~(_03_);
  assign _04_ = is_a_lt_b & ~(_02_);
  assign a_mux_sel[1] = _04_ & ~(b_mux_sel);
  assign _05_ = req_val & ~(_00_);
  assign _06_ = _05_ | \state$out [0];
  assign _07_ = _00_ ? \state$out [0] : _06_;
  assign _08_ = is_b_zero & ~(is_a_lt_b);
  assign _09_ = _07_ & ~(_08_);
  assign _10_ = _02_ ? _07_ : _09_;
  assign _11_ = _01_ | ~(resp_rdy);
  assign _12_ = _11_ & _10_;
  assign \state$in_ [0] = _01_ ? _10_ : _12_;
  assign _13_ = \state$out [1] & ~(_05_);
  assign _14_ = _00_ ? \state$out [1] : _13_;
  assign _15_ = _14_ | _08_;
  assign _16_ = _02_ ? _14_ : _15_;
  assign _17_ = _16_ & _11_;
  assign \state$in_ [1] = _01_ ? _16_ : _17_;
  assign b_reg_en = _04_ | b_mux_sel;
  assign a_reg_en = ~(_02_ & _00_);
  (* module_not_derived = 32'd1 *)
  (* src = "gcd.v:150.10-156.4" *)
  RegRst state (
    .clk(clk),
    .in_(\state$in_ ),
    .out(\state$out ),
    .reset(reset)
  );
  assign curr_state__0 = \state$out ;
  assign current_state__1 = \state$out ;
  assign next_state__0 = \state$in_ ;
  assign req_rdy = b_mux_sel;
  assign \state$clk  = clk;
  assign \state$reset  = reset;
endmodule

(* src = "gcd.v:368.1-543.10" *)
module GcdUnitDpathRTL(a_mux_sel, a_reg_en, b_mux_sel, b_reg_en, clk, is_a_lt_b, is_b_zero, req_msg_a, req_msg_b, reset, resp_msg);
  (* src = "gcd.v:406.19-406.29" *)
  wire \a_lt_b$clk ;
  (* src = "gcd.v:407.19-407.29" *)
  wire [15:0] \a_lt_b$in0 ;
  (* src = "gcd.v:408.19-408.29" *)
  wire [15:0] \a_lt_b$in1 ;
  (* src = "gcd.v:409.19-409.29" *)
  wire \a_lt_b$out ;
  (* src = "gcd.v:405.19-405.31" *)
  wire \a_lt_b$reset ;
  (* src = "gcd.v:439.19-439.28" *)
  wire \a_mux$clk ;
  (* src = "gcd.v:436.19-436.32" *)
  wire [15:0] \a_mux$in_$000 ;
  (* src = "gcd.v:437.19-437.32" *)
  wire [15:0] \a_mux$in_$001 ;
  (* src = "gcd.v:438.19-438.32" *)
  wire [15:0] \a_mux$in_$002 ;
  (* src = "gcd.v:441.19-441.28" *)
  wire [15:0] \a_mux$out ;
  (* src = "gcd.v:435.19-435.30" *)
  wire \a_mux$reset ;
  (* src = "gcd.v:440.19-440.28" *)
  wire [1:0] \a_mux$sel ;
  (* src = "gcd.v:370.24-370.33" *)
  input [1:0] a_mux_sel;
  wire [1:0] a_mux_sel;
  (* src = "gcd.v:391.19-391.28" *)
  wire \a_reg$clk ;
  (* src = "gcd.v:392.19-392.27" *)
  wire \a_reg$en ;
  (* src = "gcd.v:390.19-390.28" *)
  wire [15:0] \a_reg$in_ ;
  (* src = "gcd.v:393.19-393.28" *)
  wire [15:0] \a_reg$out ;
  (* src = "gcd.v:389.19-389.30" *)
  wire \a_reg$reset ;
  (* src = "gcd.v:371.24-371.32" *)
  input a_reg_en;
  wire a_reg_en;
  (* src = "gcd.v:458.19-458.28" *)
  wire \b_mux$clk ;
  (* src = "gcd.v:456.19-456.32" *)
  wire [15:0] \b_mux$in_$000 ;
  (* src = "gcd.v:457.19-457.32" *)
  wire [15:0] \b_mux$in_$001 ;
  (* src = "gcd.v:460.19-460.28" *)
  wire [15:0] \b_mux$out ;
  (* src = "gcd.v:455.19-455.30" *)
  wire \b_mux$reset ;
  (* src = "gcd.v:459.19-459.28" *)
  wire \b_mux$sel ;
  (* src = "gcd.v:372.24-372.33" *)
  input b_mux_sel;
  wire b_mux_sel;
  (* src = "gcd.v:491.19-491.28" *)
  wire \b_reg$clk ;
  (* src = "gcd.v:492.19-492.27" *)
  wire \b_reg$en ;
  (* src = "gcd.v:490.19-490.28" *)
  wire [15:0] \b_reg$in_ ;
  (* src = "gcd.v:493.19-493.28" *)
  wire [15:0] \b_reg$out ;
  (* src = "gcd.v:489.19-489.30" *)
  wire \b_reg$reset ;
  (* src = "gcd.v:373.24-373.32" *)
  input b_reg_en;
  wire b_reg_en;
  (* src = "gcd.v:385.19-385.28" *)
  wire [15:0] b_reg_out;
  (* src = "gcd.v:423.19-423.29" *)
  wire \b_zero$clk ;
  (* src = "gcd.v:422.19-422.29" *)
  wire [15:0] \b_zero$in_ ;
  (* src = "gcd.v:424.19-424.29" *)
  wire \b_zero$out ;
  (* src = "gcd.v:421.19-421.31" *)
  wire \b_zero$reset ;
  (* src = "gcd.v:374.24-374.27" *)
  input clk;
  wire clk;
  (* src = "gcd.v:375.24-375.33" *)
  output is_a_lt_b;
  wire is_a_lt_b;
  (* src = "gcd.v:376.24-376.33" *)
  output is_b_zero;
  wire is_b_zero;
  (* src = "gcd.v:377.24-377.33" *)
  input [15:0] req_msg_a;
  wire [15:0] req_msg_a;
  (* src = "gcd.v:378.24-378.33" *)
  input [15:0] req_msg_b;
  wire [15:0] req_msg_b;
  (* src = "gcd.v:379.24-379.29" *)
  input reset;
  wire reset;
  (* src = "gcd.v:380.24-380.32" *)
  output [15:0] resp_msg;
  wire [15:0] resp_msg;
  (* src = "gcd.v:474.19-474.26" *)
  wire \sub$clk ;
  (* src = "gcd.v:475.19-475.26" *)
  wire [15:0] \sub$in0 ;
  (* src = "gcd.v:476.19-476.26" *)
  wire [15:0] \sub$in1 ;
  (* src = "gcd.v:477.19-477.26" *)
  wire [15:0] \sub$out ;
  (* src = "gcd.v:473.19-473.28" *)
  wire \sub$reset ;
  (* src = "gcd.v:384.19-384.26" *)
  wire [15:0] sub_out;
  (* module_not_derived = 32'd1 *)
  (* src = "gcd.v:411.16-418.4" *)
  LtComparator a_lt_b (
    .clk(clk),
    .in0(\a_lt_b$in0 ),
    .in1(\a_lt_b$in1 ),
    .out(\a_lt_b$out ),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "gcd.v:443.8-452.4" *)
  Mux0 a_mux (
    .clk(clk),
    .\in_$000 (req_msg_a),
    .\in_$001 (\a_mux$in_$001 ),
    .\in_$002 (\a_lt_b$in1 ),
    .out(\a_mux$out ),
    .reset(reset),
    .sel(a_mux_sel)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "gcd.v:395.9-402.4" *)
  RegEn a_reg (
    .clk(clk),
    .en(a_reg_en),
    .in_(\a_mux$out ),
    .out(\a_lt_b$in0 ),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "gcd.v:462.8-470.4" *)
  Mux1 b_mux (
    .clk(clk),
    .\in_$000 (\a_lt_b$in0 ),
    .\in_$001 (req_msg_b),
    .out(\b_mux$out ),
    .reset(reset),
    .sel(b_mux_sel)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "gcd.v:495.9-502.4" *)
  RegEn b_reg (
    .clk(clk),
    .en(b_reg_en),
    .in_(\b_mux$out ),
    .out(\a_lt_b$in1 ),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "gcd.v:426.18-432.4" *)
  ZeroComparator b_zero (
    .clk(clk),
    .in_(\a_lt_b$in1 ),
    .out(\b_zero$out ),
    .reset(reset)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "gcd.v:479.14-486.4" *)
  Subtractor sub (
    .clk(clk),
    .in0(\a_lt_b$in0 ),
    .in1(\a_lt_b$in1 ),
    .out(\a_mux$in_$001 ),
    .reset(reset)
  );
  assign \a_lt_b$clk  = clk;
  assign \a_lt_b$reset  = reset;
  assign \a_mux$clk  = clk;
  assign \a_mux$in_$000  = req_msg_a;
  assign \a_mux$in_$002  = \a_lt_b$in1 ;
  assign \a_mux$reset  = reset;
  assign \a_mux$sel  = a_mux_sel;
  assign \a_reg$clk  = clk;
  assign \a_reg$en  = a_reg_en;
  assign \a_reg$in_  = \a_mux$out ;
  assign \a_reg$out  = \a_lt_b$in0 ;
  assign \a_reg$reset  = reset;
  assign \b_mux$clk  = clk;
  assign \b_mux$in_$000  = \a_lt_b$in0 ;
  assign \b_mux$in_$001  = req_msg_b;
  assign \b_mux$reset  = reset;
  assign \b_mux$sel  = b_mux_sel;
  assign \b_reg$clk  = clk;
  assign \b_reg$en  = b_reg_en;
  assign \b_reg$in_  = \b_mux$out ;
  assign \b_reg$out  = \a_lt_b$in1 ;
  assign \b_reg$reset  = reset;
  assign b_reg_out = \a_lt_b$in1 ;
  assign \b_zero$clk  = clk;
  assign \b_zero$in_  = \a_lt_b$in1 ;
  assign \b_zero$reset  = reset;
  assign is_a_lt_b = \a_lt_b$out ;
  assign is_b_zero = \b_zero$out ;
  assign resp_msg = \a_mux$in_$001 ;
  assign \sub$clk  = clk;
  assign \sub$in0  = \a_lt_b$in0 ;
  assign \sub$in1  = \a_lt_b$in1 ;
  assign \sub$out  = \a_mux$in_$001 ;
  assign \sub$reset  = reset;
  assign sub_out = \a_mux$in_$001 ;
endmodule

(* src = "gcd.v:587.1-610.10" *)
module LtComparator(clk, in0, in1, out, reset);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  (* src = "gcd.v:589.24-589.27" *)
  input clk;
  wire clk;
  (* src = "gcd.v:590.24-590.27" *)
  input [15:0] in0;
  wire [15:0] in0;
  (* src = "gcd.v:591.24-591.27" *)
  input [15:0] in1;
  wire [15:0] in1;
  (* src = "gcd.v:592.24-592.27" *)
  output out;
  wire out;
  (* src = "gcd.v:593.24-593.29" *)
  input reset;
  wire reset;
  assign _036_ = _021_ & ~(_035_);
  assign _037_ = _018_ & ~(_036_);
  assign _038_ = in0[8] ^ in1[8];
  assign _039_ = _038_ | _030_;
  assign _040_ = _039_ | _028_;
  assign _041_ = _021_ & ~(_040_);
  assign _042_ = in1[7] | ~(in0[7]);
  assign _043_ = ~(in0[7] ^ in1[7]);
  assign _044_ = in1[6] | ~(in0[6]);
  assign _045_ = _043_ & ~(_044_);
  assign _046_ = _042_ & ~(_045_);
  assign _047_ = in0[6] ^ in1[6];
  assign _048_ = _043_ & ~(_047_);
  assign _049_ = in1[5] | ~(in0[5]);
  assign _050_ = in0[5] ^ in1[5];
  assign _051_ = in0[4] & ~(in1[4]);
  assign _052_ = _051_ & ~(_050_);
  assign _053_ = _049_ & ~(_052_);
  assign _054_ = _048_ & ~(_053_);
  assign _055_ = _046_ & ~(_054_);
  assign _056_ = in0[4] ^ in1[4];
  assign _057_ = _056_ | _050_;
  assign _058_ = _048_ & ~(_057_);
  assign _059_ = in1[3] | ~(in0[3]);
  assign _060_ = ~(in0[3] ^ in1[3]);
  assign _061_ = in1[2] | ~(in0[2]);
  assign _062_ = _060_ & ~(_061_);
  assign _063_ = _059_ & ~(_062_);
  assign _064_ = in0[2] ^ in1[2];
  assign _065_ = _060_ & ~(_064_);
  assign _066_ = in1[1] | ~(in0[1]);
  assign _067_ = ~(in0[1] ^ in1[1]);
  assign _068_ = in1[0] & ~(in0[0]);
  assign _069_ = _067_ & ~(_068_);
  assign _070_ = _066_ & ~(_069_);
  assign _000_ = _065_ & ~(_070_);
  assign _001_ = _063_ & ~(_000_);
  assign _002_ = _058_ & ~(_001_);
  assign _003_ = _055_ & ~(_002_);
  assign _004_ = _041_ & ~(_003_);
  assign out = _037_ & ~(_004_);
  assign _005_ = in1[15] | ~(in0[15]);
  assign _006_ = ~(in0[15] ^ in1[15]);
  assign _007_ = in1[14] | ~(in0[14]);
  assign _008_ = _006_ & ~(_007_);
  assign _009_ = _005_ & ~(_008_);
  assign _010_ = in0[14] ^ in1[14];
  assign _011_ = _006_ & ~(_010_);
  assign _012_ = in1[13] | ~(in0[13]);
  assign _013_ = in0[13] ^ in1[13];
  assign _014_ = in0[12] & ~(in1[12]);
  assign _015_ = _014_ & ~(_013_);
  assign _016_ = _012_ & ~(_015_);
  assign _017_ = _011_ & ~(_016_);
  assign _018_ = _009_ & ~(_017_);
  assign _019_ = in0[12] ^ in1[12];
  assign _020_ = _019_ | _013_;
  assign _021_ = _011_ & ~(_020_);
  assign _022_ = in1[11] | ~(in0[11]);
  assign _023_ = ~(in0[11] ^ in1[11]);
  assign _024_ = in1[10] | ~(in0[10]);
  assign _025_ = _023_ & ~(_024_);
  assign _026_ = _022_ & ~(_025_);
  assign _027_ = in0[10] ^ in1[10];
  assign _028_ = _027_ | ~(_023_);
  assign _029_ = in1[9] | ~(in0[9]);
  assign _030_ = in0[9] ^ in1[9];
  assign _031_ = in0[8] & ~(in1[8]);
  assign _032_ = _031_ & ~(_030_);
  assign _033_ = _032_ | ~(_029_);
  assign _034_ = _033_ & ~(_028_);
  assign _035_ = _026_ & ~(_034_);
endmodule

(* src = "gcd.v:649.1-683.10" *)
module Mux0(clk, \in_$000 , \in_$001 , \in_$002 , out, reset, sel);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  (* src = "gcd.v:651.24-651.27" *)
  input clk;
  wire clk;
  (* src = "gcd.v:652.24-652.31" *)
  input [15:0] \in_$000 ;
  wire [15:0] \in_$000 ;
  (* src = "gcd.v:653.24-653.31" *)
  input [15:0] \in_$001 ;
  wire [15:0] \in_$001 ;
  (* src = "gcd.v:654.24-654.31" *)
  input [15:0] \in_$002 ;
  wire [15:0] \in_$002 ;
  (* src = "gcd.v:665.19-665.22" *)
  wire [15:0] \in_[0] ;
  (* src = "gcd.v:665.19-665.22" *)
  wire [15:0] \in_[1] ;
  (* src = "gcd.v:665.19-665.22" *)
  wire [15:0] \in_[2] ;
  (* src = "gcd.v:655.24-655.27" *)
  output [15:0] out;
  wire [15:0] out;
  (* src = "gcd.v:656.24-656.29" *)
  input reset;
  wire reset;
  (* src = "gcd.v:657.24-657.27" *)
  input [1:0] sel;
  wire [1:0] sel;
  assign _025_ = sel[0] | ~(sel[1]);
  assign _026_ = sel[1] | ~(sel[0]);
  assign _027_ = _026_ & _025_;
  assign _028_ = \in_$002 [0] & ~(_025_);
  assign _029_ = \in_$001 [0] & ~(_026_);
  assign _030_ = _029_ | _028_;
  assign out[0] = _027_ ? \in_$000 [0] : _030_;
  assign _031_ = \in_$002 [1] & ~(_025_);
  assign _032_ = \in_$001 [1] & ~(_026_);
  assign _033_ = _032_ | _031_;
  assign out[1] = _027_ ? \in_$000 [1] : _033_;
  assign _034_ = \in_$002 [2] & ~(_025_);
  assign _035_ = \in_$001 [2] & ~(_026_);
  assign _036_ = _035_ | _034_;
  assign out[2] = _027_ ? \in_$000 [2] : _036_;
  assign _037_ = \in_$002 [3] & ~(_025_);
  assign _038_ = \in_$001 [3] & ~(_026_);
  assign _039_ = _038_ | _037_;
  assign out[3] = _027_ ? \in_$000 [3] : _039_;
  assign _040_ = \in_$002 [4] & ~(_025_);
  assign _041_ = \in_$001 [4] & ~(_026_);
  assign _042_ = _041_ | _040_;
  assign out[4] = _027_ ? \in_$000 [4] : _042_;
  assign _043_ = \in_$002 [5] & ~(_025_);
  assign _044_ = \in_$001 [5] & ~(_026_);
  assign _045_ = _044_ | _043_;
  assign out[5] = _027_ ? \in_$000 [5] : _045_;
  assign _046_ = \in_$002 [6] & ~(_025_);
  assign _047_ = \in_$001 [6] & ~(_026_);
  assign _048_ = _047_ | _046_;
  assign out[6] = _027_ ? \in_$000 [6] : _048_;
  assign _049_ = \in_$002 [7] & ~(_025_);
  assign _050_ = \in_$001 [7] & ~(_026_);
  assign _000_ = _050_ | _049_;
  assign out[7] = _027_ ? \in_$000 [7] : _000_;
  assign _001_ = \in_$002 [8] & ~(_025_);
  assign _002_ = \in_$001 [8] & ~(_026_);
  assign _003_ = _002_ | _001_;
  assign out[8] = _027_ ? \in_$000 [8] : _003_;
  assign _004_ = \in_$002 [9] & ~(_025_);
  assign _005_ = \in_$001 [9] & ~(_026_);
  assign _006_ = _005_ | _004_;
  assign out[9] = _027_ ? \in_$000 [9] : _006_;
  assign _007_ = \in_$002 [10] & ~(_025_);
  assign _008_ = \in_$001 [10] & ~(_026_);
  assign _009_ = _008_ | _007_;
  assign out[10] = _027_ ? \in_$000 [10] : _009_;
  assign _010_ = \in_$002 [11] & ~(_025_);
  assign _011_ = \in_$001 [11] & ~(_026_);
  assign _012_ = _011_ | _010_;
  assign out[11] = _027_ ? \in_$000 [11] : _012_;
  assign _013_ = \in_$002 [12] & ~(_025_);
  assign _014_ = \in_$001 [12] & ~(_026_);
  assign _015_ = _014_ | _013_;
  assign out[12] = _027_ ? \in_$000 [12] : _015_;
  assign _016_ = \in_$002 [13] & ~(_025_);
  assign _017_ = \in_$001 [13] & ~(_026_);
  assign _018_ = _017_ | _016_;
  assign out[13] = _027_ ? \in_$000 [13] : _018_;
  assign _019_ = \in_$002 [14] & ~(_025_);
  assign _020_ = \in_$001 [14] & ~(_026_);
  assign _021_ = _020_ | _019_;
  assign out[14] = _027_ ? \in_$000 [14] : _021_;
  assign _022_ = \in_$002 [15] & ~(_025_);
  assign _023_ = \in_$001 [15] & ~(_026_);
  assign _024_ = _023_ | _022_;
  assign out[15] = _027_ ? \in_$000 [15] : _024_;
  assign \in_[0]  = \in_$000 ;
  assign \in_[1]  = \in_$001 ;
  assign \in_[2]  = \in_$002 ;
endmodule

(* src = "gcd.v:692.1-724.10" *)
module Mux1(clk, \in_$000 , \in_$001 , out, reset, sel);
  (* src = "gcd.v:694.24-694.27" *)
  input clk;
  wire clk;
  (* src = "gcd.v:695.24-695.31" *)
  input [15:0] \in_$000 ;
  wire [15:0] \in_$000 ;
  (* src = "gcd.v:696.24-696.31" *)
  input [15:0] \in_$001 ;
  wire [15:0] \in_$001 ;
  (* src = "gcd.v:707.19-707.22" *)
  wire [15:0] \in_[0] ;
  (* src = "gcd.v:707.19-707.22" *)
  wire [15:0] \in_[1] ;
  (* src = "gcd.v:697.24-697.27" *)
  output [15:0] out;
  wire [15:0] out;
  (* src = "gcd.v:698.24-698.29" *)
  input reset;
  wire reset;
  (* src = "gcd.v:699.24-699.27" *)
  input sel;
  wire sel;
  assign out[0] = sel ? \in_$001 [0] : \in_$000 [0];
  assign out[1] = sel ? \in_$001 [1] : \in_$000 [1];
  assign out[2] = sel ? \in_$001 [2] : \in_$000 [2];
  assign out[3] = sel ? \in_$001 [3] : \in_$000 [3];
  assign out[4] = sel ? \in_$001 [4] : \in_$000 [4];
  assign out[5] = sel ? \in_$001 [5] : \in_$000 [5];
  assign out[6] = sel ? \in_$001 [6] : \in_$000 [6];
  assign out[7] = sel ? \in_$001 [7] : \in_$000 [7];
  assign out[8] = sel ? \in_$001 [8] : \in_$000 [8];
  assign out[9] = sel ? \in_$001 [9] : \in_$000 [9];
  assign out[10] = sel ? \in_$001 [10] : \in_$000 [10];
  assign out[11] = sel ? \in_$001 [11] : \in_$000 [11];
  assign out[12] = sel ? \in_$001 [12] : \in_$000 [12];
  assign out[13] = sel ? \in_$001 [13] : \in_$000 [13];
  assign out[14] = sel ? \in_$001 [14] : \in_$000 [14];
  assign out[15] = sel ? \in_$001 [15] : \in_$000 [15];
  assign \in_[0]  = \in_$000 ;
  assign \in_[1]  = \in_$001 ;
endmodule

(* src = "gcd.v:551.1-579.10" *)
module RegEn(clk, en, in_, out, reset);
  (* src = "gcd.v:553.24-553.27" *)
  input clk;
  wire clk;
  (* src = "gcd.v:554.24-554.26" *)
  input en;
  wire en;
  (* src = "gcd.v:555.24-555.27" *)
  input [15:0] in_;
  wire [15:0] in_;
  (* src = "gcd.v:556.24-556.27" *)
  output [15:0] out;
  reg [15:0] out;
  (* src = "gcd.v:557.24-557.29" *)
  input reset;
  wire reset;
  (* src = "gcd.v:570.3-576.6" *)
  always @(posedge clk)
    if (en) out[0] <= in_[0];
  (* src = "gcd.v:570.3-576.6" *)
  always @(posedge clk)
    if (en) out[1] <= in_[1];
  (* src = "gcd.v:570.3-576.6" *)
  always @(posedge clk)
    if (en) out[2] <= in_[2];
  (* src = "gcd.v:570.3-576.6" *)
  always @(posedge clk)
    if (en) out[3] <= in_[3];
  (* src = "gcd.v:570.3-576.6" *)
  always @(posedge clk)
    if (en) out[4] <= in_[4];
  (* src = "gcd.v:570.3-576.6" *)
  always @(posedge clk)
    if (en) out[5] <= in_[5];
  (* src = "gcd.v:570.3-576.6" *)
  always @(posedge clk)
    if (en) out[6] <= in_[6];
  (* src = "gcd.v:570.3-576.6" *)
  always @(posedge clk)
    if (en) out[7] <= in_[7];
  (* src = "gcd.v:570.3-576.6" *)
  always @(posedge clk)
    if (en) out[8] <= in_[8];
  (* src = "gcd.v:570.3-576.6" *)
  always @(posedge clk)
    if (en) out[9] <= in_[9];
  (* src = "gcd.v:570.3-576.6" *)
  always @(posedge clk)
    if (en) out[10] <= in_[10];
  (* src = "gcd.v:570.3-576.6" *)
  always @(posedge clk)
    if (en) out[11] <= in_[11];
  (* src = "gcd.v:570.3-576.6" *)
  always @(posedge clk)
    if (en) out[12] <= in_[12];
  (* src = "gcd.v:570.3-576.6" *)
  always @(posedge clk)
    if (en) out[13] <= in_[13];
  (* src = "gcd.v:570.3-576.6" *)
  always @(posedge clk)
    if (en) out[14] <= in_[14];
  (* src = "gcd.v:570.3-576.6" *)
  always @(posedge clk)
    if (en) out[15] <= in_[15];
endmodule

(* src = "gcd.v:329.1-361.10" *)
module RegRst(clk, in_, out, reset);
  (* src = "gcd.v:331.24-331.27" *)
  input clk;
  wire clk;
  (* src = "gcd.v:332.24-332.27" *)
  input [1:0] in_;
  wire [1:0] in_;
  (* src = "gcd.v:333.24-333.27" *)
  output [1:0] out;
  reg [1:0] out;
  (* src = "gcd.v:334.24-334.29" *)
  input reset;
  wire reset;
  (* src = "gcd.v:351.3-358.6" *)
  always @(posedge clk)
    if (reset) out[0] <= 1'h0;
    else out[0] <= in_[0];
  (* src = "gcd.v:351.3-358.6" *)
  always @(posedge clk)
    if (reset) out[1] <= 1'h0;
    else out[1] <= in_[1];
endmodule

(* src = "gcd.v:732.1-755.10" *)
module Subtractor(clk, in0, in1, out, reset);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  (* src = "gcd.v:734.24-734.27" *)
  input clk;
  wire clk;
  (* src = "gcd.v:735.24-735.27" *)
  input [15:0] in0;
  wire [15:0] in0;
  (* src = "gcd.v:736.24-736.27" *)
  input [15:0] in1;
  wire [15:0] in1;
  (* src = "gcd.v:737.24-737.27" *)
  output [15:0] out;
  wire [15:0] out;
  (* src = "gcd.v:738.24-738.29" *)
  input reset;
  wire reset;
  assign out[0] = in0[0] ^ in1[0];
  assign _040_ = ~(in0[1] ^ in1[1]);
  assign _041_ = in1[0] & ~(in0[0]);
  assign out[1] = ~(_041_ ^ _040_);
  assign _042_ = in0[2] ^ in1[2];
  assign _043_ = in0[1] & ~(in1[1]);
  assign _044_ = _040_ & ~(_041_);
  assign _045_ = _044_ | _043_;
  assign out[2] = ~(_045_ ^ _042_);
  assign _046_ = in0[3] ^ in1[3];
  assign _047_ = in1[2] | ~(in0[2]);
  assign _048_ = _045_ & ~(_042_);
  assign _049_ = _047_ & ~(_048_);
  assign out[3] = _049_ ^ _046_;
  assign _050_ = in0[4] ^ in1[4];
  assign _051_ = in0[3] & ~(in1[3]);
  assign _052_ = ~(_047_ | _046_);
  assign _053_ = _052_ | _051_;
  assign _054_ = _046_ | _042_;
  assign _055_ = _045_ & ~(_054_);
  assign _056_ = _055_ | _053_;
  assign out[4] = ~(_056_ ^ _050_);
  assign _057_ = in0[5] ^ in1[5];
  assign _058_ = in1[4] | ~(in0[4]);
  assign _059_ = _056_ & ~(_050_);
  assign _060_ = _058_ & ~(_059_);
  assign out[5] = _060_ ^ _057_;
  assign _061_ = in0[6] ^ in1[6];
  assign _062_ = in0[5] & ~(in1[5]);
  assign _063_ = ~(_058_ | _057_);
  assign _064_ = _063_ | _062_;
  assign _065_ = _057_ | _050_;
  assign _066_ = _065_ | ~(_056_);
  assign _067_ = _066_ & ~(_064_);
  assign out[6] = _067_ ^ _061_;
  assign _068_ = in0[7] ^ in1[7];
  assign _069_ = in1[6] | ~(in0[6]);
  assign _070_ = ~(_067_ | _061_);
  assign _071_ = _069_ & ~(_070_);
  assign out[7] = _071_ ^ _068_;
  assign _072_ = in0[8] ^ in1[8];
  assign _073_ = in0[7] & ~(in1[7]);
  assign _074_ = ~(_069_ | _068_);
  assign _075_ = _074_ | _073_;
  assign _076_ = _068_ | _061_;
  assign _077_ = _064_ & ~(_076_);
  assign _078_ = _077_ | _075_;
  assign _079_ = _076_ | _065_;
  assign _080_ = _056_ & ~(_079_);
  assign _081_ = _080_ | _078_;
  assign out[8] = ~(_081_ ^ _072_);
  assign _000_ = in0[9] ^ in1[9];
  assign _001_ = in1[8] | ~(in0[8]);
  assign _002_ = _081_ & ~(_072_);
  assign _003_ = _001_ & ~(_002_);
  assign out[9] = _003_ ^ _000_;
  assign _004_ = in0[10] ^ in1[10];
  assign _005_ = in0[9] & ~(in1[9]);
  assign _006_ = ~(_001_ | _000_);
  assign _007_ = _006_ | _005_;
  assign _008_ = _000_ | _072_;
  assign _009_ = _008_ | ~(_081_);
  assign _010_ = _009_ & ~(_007_);
  assign out[10] = _010_ ^ _004_;
  assign _011_ = in0[11] ^ in1[11];
  assign _012_ = in1[10] | ~(in0[10]);
  assign _013_ = ~(_010_ | _004_);
  assign _014_ = _012_ & ~(_013_);
  assign out[11] = _014_ ^ _011_;
  assign _015_ = in0[12] ^ in1[12];
  assign _016_ = in1[11] | ~(in0[11]);
  assign _017_ = ~(_012_ | _011_);
  assign _018_ = _016_ & ~(_017_);
  assign _019_ = _011_ | _004_;
  assign _020_ = _007_ & ~(_019_);
  assign _021_ = _018_ & ~(_020_);
  assign _022_ = _019_ | _008_;
  assign _023_ = _081_ & ~(_022_);
  assign _024_ = _021_ & ~(_023_);
  assign out[12] = _024_ ^ _015_;
  assign _025_ = in0[13] ^ in1[13];
  assign _026_ = in1[12] | ~(in0[12]);
  assign _027_ = ~(_024_ | _015_);
  assign _028_ = _026_ & ~(_027_);
  assign out[13] = _028_ ^ _025_;
  assign _029_ = in0[14] ^ in1[14];
  assign _030_ = in1[13] | ~(in0[13]);
  assign _031_ = ~(_026_ | _025_);
  assign _032_ = _030_ & ~(_031_);
  assign _033_ = _025_ | _015_;
  assign _034_ = ~(_033_ | _024_);
  assign _035_ = _032_ & ~(_034_);
  assign out[14] = _035_ ^ _029_;
  assign _036_ = in0[15] ^ in1[15];
  assign _037_ = in1[14] | ~(in0[14]);
  assign _038_ = ~(_035_ | _029_);
  assign _039_ = _037_ & ~(_038_);
  assign out[15] = _039_ ^ _036_;
endmodule

(* src = "gcd.v:618.1-640.10" *)
module ZeroComparator(clk, in_, out, reset);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  (* src = "gcd.v:620.24-620.27" *)
  input clk;
  wire clk;
  (* src = "gcd.v:621.24-621.27" *)
  input [15:0] in_;
  wire [15:0] in_;
  (* src = "gcd.v:622.24-622.27" *)
  output out;
  wire out;
  (* src = "gcd.v:623.24-623.29" *)
  input reset;
  wire reset;
  assign _00_ = ~(in_[1] | in_[0]);
  assign _01_ = in_[3] | in_[2];
  assign _02_ = _00_ & ~(_01_);
  assign _03_ = in_[5] | in_[4];
  assign _04_ = in_[7] | in_[6];
  assign _05_ = _04_ | _03_;
  assign _06_ = _02_ & ~(_05_);
  assign _07_ = in_[9] | in_[8];
  assign _08_ = in_[11] | in_[10];
  assign _09_ = _08_ | _07_;
  assign _10_ = in_[13] | in_[12];
  assign _11_ = in_[15] | in_[14];
  assign _12_ = _11_ | _10_;
  assign _13_ = _12_ | _09_;
  assign out = _06_ & ~(_13_);
endmodule

(* top =  1  *)
(* src = "gcd.v:11.1-102.10" *)
module gcd(clk, req_msg, req_rdy, req_val, reset, resp_msg, resp_rdy, resp_val);
  (* src = "gcd.v:13.15-13.18" *)
  input clk;
  wire clk;
  (* src = "gcd.v:30.19-30.33" *)
  wire [1:0] \ctrl$a_mux_sel ;
  (* src = "gcd.v:34.19-34.32" *)
  wire \ctrl$a_reg_en ;
  (* src = "gcd.v:32.19-32.33" *)
  wire \ctrl$b_mux_sel ;
  (* src = "gcd.v:33.19-33.32" *)
  wire \ctrl$b_reg_en ;
  (* src = "gcd.v:26.19-26.27" *)
  wire \ctrl$clk ;
  (* src = "gcd.v:27.19-27.33" *)
  wire \ctrl$is_a_lt_b ;
  (* src = "gcd.v:24.19-24.33" *)
  wire \ctrl$is_b_zero ;
  (* src = "gcd.v:35.19-35.31" *)
  wire \ctrl$req_rdy ;
  (* src = "gcd.v:28.19-28.31" *)
  wire \ctrl$req_val ;
  (* src = "gcd.v:29.19-29.29" *)
  wire \ctrl$reset ;
  (* src = "gcd.v:25.19-25.32" *)
  wire \ctrl$resp_rdy ;
  (* src = "gcd.v:31.19-31.32" *)
  wire \ctrl$resp_val ;
  (* src = "gcd.v:54.19-54.34" *)
  wire [1:0] \dpath$a_mux_sel ;
  (* src = "gcd.v:61.19-61.33" *)
  wire \dpath$a_reg_en ;
  (* src = "gcd.v:58.19-58.34" *)
  wire \dpath$b_mux_sel ;
  (* src = "gcd.v:60.19-60.33" *)
  wire \dpath$b_reg_en ;
  (* src = "gcd.v:55.19-55.28" *)
  wire \dpath$clk ;
  (* src = "gcd.v:64.19-64.34" *)
  wire \dpath$is_a_lt_b ;
  (* src = "gcd.v:62.19-62.34" *)
  wire \dpath$is_b_zero ;
  (* src = "gcd.v:57.19-57.34" *)
  wire [15:0] \dpath$req_msg_a ;
  (* src = "gcd.v:56.19-56.34" *)
  wire [15:0] \dpath$req_msg_b ;
  (* src = "gcd.v:59.19-59.30" *)
  wire \dpath$reset ;
  (* src = "gcd.v:63.19-63.33" *)
  wire [15:0] \dpath$resp_msg ;
  (* src = "gcd.v:14.24-14.31" *)
  input [31:0] req_msg;
  wire [31:0] req_msg;
  (* src = "gcd.v:15.15-15.22" *)
  output req_rdy;
  wire req_rdy;
  (* src = "gcd.v:16.15-16.22" *)
  input req_val;
  wire req_val;
  (* src = "gcd.v:17.15-17.20" *)
  input reset;
  wire reset;
  (* src = "gcd.v:18.24-18.32" *)
  output [15:0] resp_msg;
  wire [15:0] resp_msg;
  (* src = "gcd.v:19.15-19.23" *)
  input resp_rdy;
  wire resp_rdy;
  (* src = "gcd.v:20.15-20.23" *)
  output resp_val;
  wire resp_val;
  (* module_not_derived = 32'd1 *)
  (* src = "gcd.v:37.18-51.4" *)
  GcdUnitCtrlRTL ctrl (
    .a_mux_sel(\ctrl$a_mux_sel ),
    .a_reg_en(\ctrl$a_reg_en ),
    .b_mux_sel(\ctrl$b_mux_sel ),
    .b_reg_en(\ctrl$b_reg_en ),
    .clk(clk),
    .is_a_lt_b(\ctrl$is_a_lt_b ),
    .is_b_zero(\ctrl$is_b_zero ),
    .req_rdy(\ctrl$req_rdy ),
    .req_val(req_val),
    .reset(reset),
    .resp_rdy(resp_rdy),
    .resp_val(\ctrl$resp_val )
  );
  (* module_not_derived = 32'd1 *)
  (* src = "gcd.v:66.19-79.4" *)
  GcdUnitDpathRTL dpath (
    .a_mux_sel(\ctrl$a_mux_sel ),
    .a_reg_en(\ctrl$a_reg_en ),
    .b_mux_sel(\ctrl$b_mux_sel ),
    .b_reg_en(\ctrl$b_reg_en ),
    .clk(clk),
    .is_a_lt_b(\ctrl$is_a_lt_b ),
    .is_b_zero(\ctrl$is_b_zero ),
    .req_msg_a(req_msg[31:16]),
    .req_msg_b(req_msg[15:0]),
    .reset(reset),
    .resp_msg(\dpath$resp_msg )
  );
  assign \ctrl$clk  = clk;
  assign \ctrl$req_val  = req_val;
  assign \ctrl$reset  = reset;
  assign \ctrl$resp_rdy  = resp_rdy;
  assign \dpath$a_mux_sel  = \ctrl$a_mux_sel ;
  assign \dpath$a_reg_en  = \ctrl$a_reg_en ;
  assign \dpath$b_mux_sel  = \ctrl$b_mux_sel ;
  assign \dpath$b_reg_en  = \ctrl$b_reg_en ;
  assign \dpath$clk  = clk;
  assign \dpath$is_a_lt_b  = \ctrl$is_a_lt_b ;
  assign \dpath$is_b_zero  = \ctrl$is_b_zero ;
  assign \dpath$req_msg_a  = req_msg[31:16];
  assign \dpath$req_msg_b  = req_msg[15:0];
  assign \dpath$reset  = reset;
  assign req_rdy = \ctrl$req_rdy ;
  assign resp_msg = \dpath$resp_msg ;
  assign resp_val = \ctrl$resp_val ;
endmodule
